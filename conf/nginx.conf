daemon off;

pid /app/nginx/nginx.pid;
error_log stderr;

worker_processes auto;

events {
  worker_connections 16384;
}

http {
  # TODO access log format in JSON
  log_format iso8601_json_format escape=json '{"time_iso8601": "$time_iso8601",'
  '"remote_addr": "$remote_addr",'
  '"request": "$request",'
  '"status": "$status",'
  '"body_bytes_sent": "$body_bytes_sent",'
  '"request_time": "$request_time",'
  '"http_referer": "$http_referer",'
  '"http_user_agent": "$http_user_agent",'
  '"request_time": $request_time, '
  '"upstream_response_time": $upstream_response_time, '
  '"upstream_connect_time": $upstream_connect_time, '
  '"upstream_header_time": $upstream_header_time, '
  '"connection": $connection, '
  '"connection_requests": $connection_requests}';
  
  access_log /dev/stdout;

  client_body_temp_path /app/nginx/client;
  fastcgi_temp_path      /app/nginx/fcgi;
  proxy_temp_path        /app/nginx/proxy;
  scgi_temp_path         /app/nginx/cgi;
  uwsgi_temp_path        /app/nginx/uwsgi;

  include /usr/local/openresty/nginx/conf/mime.types;

  server_tokens off;

  lua_shared_dict prometheus_metrics 10M;
  lua_package_path "/usr/local/openresty/site/lualib/?.lua;;";

  init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")

    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    metric_connections = prometheus:gauge(
      "nginx_http_connections", "Number of HTTP connections", {"state"})
  }

  log_by_lua_block {
    metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
  }

  server {
    sendfile on;
    listen 8080;
    
    location ~* \.(?:ico|css|js|json|gif|jpe?g|png|ttf|svg|eot|woff|woff2|xml|wav|html?|cur|map)$ {
      root /app/.test;
    }

    location / {
      return 301 https://test-ui.com;
    }

    location /hello {
      default_type text/html;
      content_by_lua_block {
        ngx.say("<p>hello, world</p>")
      }
    }
  }

  server {
    listen 9145;
    location /metrics {
      content_by_lua_block {
        metric_connections:set(ngx.var.connections_reading, {"reading"})
        metric_connections:set(ngx.var.connections_waiting, {"waiting"})
        metric_connections:set(ngx.var.connections_writing, {"writing"})
        prometheus:collect()
      }
    }
  }
}

